{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport DataFormPage from \"./pages/DataFormPage\";\nimport DataTablePage from \"./pages/DataTablePage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Navbar from \"./components/NavBar/\"; // Importa el componente Navbar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false); // Estado para determinar si el usuario es administrador\n\n  useEffect(() => {\n    // Aquí deberías implementar la lógica para verificar si el usuario es administrador después del login\n    // Puedes obtener esta información de tu backend o de la respuesta del login\n    // Por ejemplo, si tienes la información en el estado isLoggedIn, podrías hacer algo como:\n    if (isLoggedIn) {\n      // Lógica para determinar si el usuario es administrador\n      // Esto es un ejemplo simple, ajusta según tus necesidades\n      const user = JSON.parse(localStorage.getItem(\"user\")); // Suponiendo que guardas los datos del usuario en el localStorage\n      setIsAdmin(user && user.is_admin === 1);\n    }\n  }, [isLoggedIn]);\n\n  // Función para manejar el login exitoso\n  const handleLogin = () => {\n    setIsLoggedIn(true);\n  };\n\n  // Función para manejar el logout\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setIsAdmin(false); // Reinicia el estado de isAdmin al cerrar sesión\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      isAdmin: isAdmin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {\n          handleLogin: handleLogin,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/form\",\n        element: /*#__PURE__*/_jsxDEV(DataFormPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), isAdmin && /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/table\",\n        element: /*#__PURE__*/_jsxDEV(DataTablePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hcH6AQjLKtjMN0S5kL9DAN10Nc4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","DataFormPage","DataTablePage","LoginPage","Navbar","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","isAdmin","setIsAdmin","user","JSON","parse","localStorage","getItem","is_admin","handleLogin","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport DataFormPage from \"./pages/DataFormPage\";\nimport DataTablePage from \"./pages/DataTablePage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Navbar from \"./components/NavBar/\"; // Importa el componente Navbar\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false); // Estado para determinar si el usuario es administrador\n\n  useEffect(() => {\n    // Aquí deberías implementar la lógica para verificar si el usuario es administrador después del login\n    // Puedes obtener esta información de tu backend o de la respuesta del login\n    // Por ejemplo, si tienes la información en el estado isLoggedIn, podrías hacer algo como:\n    if (isLoggedIn) {\n      // Lógica para determinar si el usuario es administrador\n      // Esto es un ejemplo simple, ajusta según tus necesidades\n      const user = JSON.parse(localStorage.getItem(\"user\")); // Suponiendo que guardas los datos del usuario en el localStorage\n      setIsAdmin(user && user.is_admin === 1);\n    }\n  }, [isLoggedIn]);\n\n  // Función para manejar el login exitoso\n  const handleLogin = () => {\n    setIsLoggedIn(true);\n  };\n\n  // Función para manejar el logout\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setIsAdmin(false); // Reinicia el estado de isAdmin al cerrar sesión\n  };\n\n  return (\n    <Router>\n      <Navbar isAdmin={isAdmin} /> {/* Pasa el estado de isAdmin al Navbar */}\n      <Routes>\n        <Route path=\"/\" element={<LoginPage handleLogin={handleLogin} isLoggedIn={isLoggedIn} />} />\n        <Route path=\"/form\" element={<DataFormPage />} />\n        {isAdmin && <Route path=\"/table\" element={<DataTablePage />} />} {/* Ruta protegida solo para administradores */}\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,MAAM,MAAM,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA,IAAIa,UAAU,EAAE;MACd;MACA;MACA,MAAMI,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;MACvDL,UAAU,CAACC,IAAI,IAAIA,IAAI,CAACK,QAAQ,KAAK,CAAC,CAAC;IACzC;EACF,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBT,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzBV,aAAa,CAAC,KAAK,CAAC;IACpBE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,oBACEN,OAAA,CAACR,MAAM;IAAAuB,QAAA,gBACLf,OAAA,CAACF,MAAM;MAACO,OAAO,EAAEA;IAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eAC7BnB,OAAA,CAACN,MAAM;MAAAqB,QAAA,gBACLf,OAAA,CAACP,KAAK;QAAC2B,IAAI,EAAC,GAAG;QAACC,OAAO,eAAErB,OAAA,CAACH,SAAS;UAACgB,WAAW,EAAEA,WAAY;UAACV,UAAU,EAAEA;QAAW;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5FnB,OAAA,CAACP,KAAK;QAAC2B,IAAI,EAAC,OAAO;QAACC,OAAO,eAAErB,OAAA,CAACL,YAAY;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAChDd,OAAO,iBAAIL,OAAA,CAACP,KAAK;QAAC2B,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAErB,OAAA,CAACJ,aAAa;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,GAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACjB,EAAA,CArCID,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}